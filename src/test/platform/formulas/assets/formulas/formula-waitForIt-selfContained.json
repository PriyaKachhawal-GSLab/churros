{
    "id": 22,
    "name": "Wait for it (self-contained)",
    "userId": 1,
    "accountId": 1,
    "createdDate": "2017-05-12T20:22:01Z",
    "steps": [
        {
            "id": 23,
            "onSuccess": [
                "rando"
            ],
            "onFailure": [
                "slackmsg"
            ],
            "name": "Loop",
            "type": "loop",
            "properties": {
                "list": "steps.SetLoop.loop"
            }
        },
        {
            "id": 22,
            "onSuccess": [
                "Loop"
            ],
            "onFailure": [],
            "name": "SetLoop",
            "type": "script",
            "properties": {
                "body": "let loop = [...Array(20).keys()];\n\ndone({loop: loop});"
            }
        },
        {
            "id": 24,
            "onSuccess": [
                "Loop"
            ],
            "onFailure": [],
            "name": "rando",
            "type": "script",
            "properties": {
                "body": "let tangent = 0;\n\nlet num = Math.floor(Math.random() * (1000000 - 500)) + 500;\n\nfor (let i = 0; i < num; i++) {\n  tangent = Math.tan(i);\n}\n\ndone({done: tangent})"
            }
        },
        {
            "id": 25,
            "onSuccess": [
                "callslack"
            ],
            "onFailure": [],
            "name": "slackmsg",
            "type": "script",
            "properties": {
                "body": "\nlet emojis = [\":yay:\", \":rocket:\", \":party_parrot:\", \":charmander:\", \":smile:\"];\nlet emoji = \" \" + emojis[Math.floor(Math.random() * emojis.length)];\n\n\nlet message = {\"text\": \"Yay, \" + emoji + \" I'm done with execution number \" + info.formulaExecutionId + \" \" + new Date(info.stepEndTime)};\n\ndone({payload: message});"
            }
        },
        {
            "id": 27,
            "onSuccess": [],
            "onFailure": [],
            "name": "Done",
            "type": "script",
            "properties": {
                "body": "done({done: true});"
            }
        },
        {
            "id": 26,
            "onSuccess": [
                "Done"
            ],
            "onFailure": [],
            "name": "callslack",
            "type": "httpRequest",
            "properties": {
                "method": "POST",
                "url": "https://hooks.slack.com/services/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",
                "body": "${steps.slackmsg.payload}"
            }
        }
    ],
    "triggers": [
        {
            "id": 18,
            "onSuccess": [
                "SetLoop"
            ],
            "onFailure": [],
            "type": "manual",
            "async": true,
            "name": "trigger",
            "properties": {}
        }
    ],
    "active": true,
    "singleThreaded": false,
    "configuration": []
}
