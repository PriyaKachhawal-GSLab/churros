{
    "active": true,
    "configuration": [
        {
            "key": "element.instance",
            "name": "Element Instance",
            "required": true,
            "type": "elementInstance"
        },
        {
            "key": "event.notification.authtoken",
            "name": "Event Notification AuthToken",
            "required": true,
            "type": "value"
        },
        {
            "key": "event.notification.url",
            "name": "Event Notification URL",
            "required": true,
            "type": "value"
        },
        {
            "description": "Optional email where formula errors and notification steps will be sent (If more than one email is needed, separate each email with a comma)",
            "key": "notification.email",
            "name": "Notification Email",
            "required": false,
            "type": "value"
        }
    ],
    "engine": "v3",
    "method": "POST",
    "name": "Nintex 790 - Load Test",
    "singleThreaded": false,
    "steps": [
        {
            "name": "build-document-get-object-input",
            "onFailure": [],
            "onSuccess": [
                "get-document-object"
            ],
            "properties": {
                "body": "var objectType = \"\";\rvar memberId = \"\";\r\rif (trigger.event.objectType !== undefined && trigger.event.objectType !== null) {\r  objectType = trigger.event.objectType;\r  \r  if (objectType && objectType.toLowerCase() === 'file') {\r    objectType = 'files';\r  } else if (objectType && objectType.toLowerCase() === 'folder') {\r    objectType = 'folders';\r  }\r  \r  if(trigger.event.otherId !== undefined && trigger.event.otherId !== null) {\r    var ids = trigger.event.otherId.split(\",\");\r    if(ids.length === 2) {\r      memberId = ids[1];\r    }\r  }\r}\r\rdone(\r  {\r    objectType: objectType,\r    objectId: trigger.event.objectId,\r    memberId: { \"Elements-As-Team-Member\": memberId }\r  }\r);"
            },
            "type": "script"
        },
        {
            "name": "build-error-payload",
            "onFailure": [],
            "onSuccess": [
                "send-error-payload"
            ],
            "properties": {
                "body": "var eventObject = trigger.event;\rvar objectType = trigger.event.objectType;\rvar objectId = trigger.event.objectId;\r\rif (objectType === undefined || objectType === null || objectType === \"\") {\r  objectType = \"unknown\";\r}\r\rvar errorPayload = {};\rconst apiStepNames = steps[\"set-retry-step-names\"].steps;\rapiStepNames.forEach(function(apiStepName) {\r  const step = steps[apiStepName];\r  if (step && step.response && step.response.code >= 400) {\r    const requestHeaderAuth = step.request.headers[\"Authorization\"];\r    if (requestHeaderAuth) {\r      // Truncated to prevent security information being logged\r      step.request.headers[\"Authorization\"] = \"[TRUNCATED]\";\r    }\r    \r    const requestBody = step.request.body;\r    if (requestBody && requestBody.properties) {\r      // Truncated to prevent customer data being logged\r      step.request.body.properties = \"[TRUNCATED]\";\r    }\r\r    errorPayload[apiStepName] = step;\r  }\r});\r\rerrorPayload.eventType = trigger.event.elementKey + \":\" + objectType.toLowerCase() + \":\" + trigger.event.eventType.toLowerCase();\rerrorPayload.eventId = steps[\"create-unique-eventid\"].eventId;\rerrorPayload.retryAttemptNumber = trigger.retryAttemptNumber || 1;\rerrorPayload.retryParentExecution = trigger.retryParentExecution;\rerrorPayload.connectionId = trigger.instanceId;\rerrorPayload.objectId = objectId;\rerrorPayload.timestamp = trigger.event.date;\r\rconst elementInstanceObj = steps[\"get-element-instance\"];\rif (elementInstanceObj && elementInstanceObj.response) {\r  const elementResponse = elementInstanceObj.response;\r  if (elementResponse.code === 200 && elementResponse.body && elementResponse.body.user) {\r    // set error payload with element instance user details\r    // this is to associate the connection ID with the NWC tenant ID (partial text in email address)\r    errorPayload.user = elementInstanceObj.response.body.user;\r  } else {\r    // otherwise if any issues with it, we fallback with trigger userId which will require admin account to figure out the account email address\r    const user = { id: trigger.body.message.userId };\r    errorPayload.user = user;\r  }\r}\r\rdone({ response: errorPayload });"
            },
            "type": "script"
        },
        {
            "name": "build-get-object-input",
            "onFailure": [],
            "onSuccess": [
                "get-object"
            ],
            "properties": {
                "body": "done(\r  {\r    objectType: trigger.event.objectType,\r    objectId: trigger.event.objectId,\r    api: \"/events\",\r    hub: trigger.event.hubKey\r  }\r);"
            },
            "type": "script"
        },
        {
            "name": "get-box-custom-fields",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [
                "transform-box-metadata-event"
            ],
            "properties": {
                "api": "/hubs/documents/files/{objectId}/custom-fields",
                "elementInstanceId": "${config.element.instance}",
                "method": "GET",
                "path": "${steps.build-document-get-object-input}",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000"
            },
            "type": "elementRequest"
        },
        {
            "name": "get-document-object",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [
                "is-box-metadata-event"
            ],
            "properties": {
                "api": "/hubs/documents/{objectType}/{objectId}/metadata",
                "elementInstanceId": "${config.element.instance}",
                "headers": "${steps.build-document-get-object-input.memberId}",
                "method": "GET",
                "path": "${steps.build-document-get-object-input}",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000"
            },
            "type": "elementRequest"
        },
        {
            "name": "get-element-instance",
            "onFailure": [
                "build-error-payload"
            ],
            "onSuccess": [
                "build-error-payload"
            ],
            "properties": {
                "api": "/instances/${trigger.instanceId}",
                "method": "GET",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000"
            },
            "type": "request"
        },
        {
            "name": "get-element-instance-for-org-id",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [
                "get-org-id"
            ],
            "properties": {
                "api": "/instances/${trigger.instanceId}",
                "method": "GET",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000"
            },
            "type": "request"
        },
        {
            "name": "get-object",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [
                "transform-event"
            ],
            "properties": {
                "api": "/hubs/{hub}/{objectType}/{objectId}",
                "elementInstanceId": "${config.element.instance}",
                "method": "GET",
                "path": "${steps.build-get-object-input}",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000"
            },
            "type": "elementRequest"
        },
        {
            "name": "get-org-id",
            "onFailure": [],
            "onSuccess": [
                "is-deleted-or-moved-event"
            ],
            "properties": {
                "body": "let orgId; \r\n\r\nif (steps['get-element-instance-for-org-id']) { \r\n  try { \r\n    const elementInstanceDetail = steps['get-element-instance-for-org-id'].response.body; \r\n    const loginUrl = elementInstanceDetail['configuration']['sfdc.user.id.url']; \r\n    const result = loginUrl.match(/^https?:\\/\\/[^\\/]*\\/id\\/([^\\/]*)\\/([^\\/]*)$/i); \r\n    orgId = result[1]; \r\n  } catch (e) { \r\n    console.log(e); \r\n  } \r\n} \r\n\r\n\r\ndone({ orgId });\r\n"
            },
            "type": "script"
        },
        {
            "name": "is-box-metadata-event",
            "onFailure": [
                "transform-document-event"
            ],
            "onSuccess": [
                "get-box-custom-fields"
            ],
            "properties": {
                "body": "if (trigger.event.elementKey === 'box' \r\n    && trigger.body.message \r\n    && trigger.body.message.raw\r\n    && trigger.body.message.raw.metadata) {\r\n  done(true); \r\n} else { \r\n  done(false); \r\n}\r\n"
            },
            "type": "filter"
        },
        {
            "name": "is-deleted-or-moved-document-hub-event",
            "onFailure": [
                "transform-event"
            ],
            "onSuccess": [
                "transform-document-event"
            ],
            "properties": {
                "body": "if (trigger.event.hubKey === 'documents') {\r  done(false);\r} else {\r  done(true);\r}"
            },
            "type": "filter"
        },
        {
            "name": "is-deleted-or-moved-event",
            "onFailure": [
                "is-documents-hub"
            ],
            "onSuccess": [
                "is-deleted-or-moved-document-hub-event"
            ],
            "properties": {
                "body": "if (trigger.event.eventType === 'DELETED' || trigger.event.eventType === 'MOVED') {\n  done(true);\n} else {\n  done(false);\n}"
            },
            "type": "filter"
        },
        {
            "name": "is-retriable-status-code",
            "onFailure": [],
            "onSuccess": [
                "get-element-instance"
            ],
            "properties": {
                "body": "const apiStepNames = steps[\"set-retry-step-names\"].steps;\rlet isRetriableErrorCode = false;\r\rapiStepNames.forEach(function(apiStepName) {\r  const step = steps[apiStepName];\r  if (step && step.response) {\r    if (step.response.code == 429 || step.response.code == 408) {\r      done(true);\r    }\r\r    if (step.response.code >= 500 && step.response.code <= 599) {\r      done(true);\r    }\r  }\r});\r\rdone(false);\r"
            },
            "type": "filter"
        },
        {
            "name": "is-sfdc-event",
            "onFailure": [
                "is-deleted-or-moved-event"
            ],
            "onSuccess": [
                "get-element-instance-for-org-id"
            ],
            "properties": {
                "body": "if (trigger.event.elementKey === 'sfdc') {\r  done(true);\r} else {\r  done(false);\r}"
            },
            "type": "filter"
        },
        {
            "name": "retry-api-errors",
            "onFailure": [],
            "onSuccess": [],
            "properties": {
                "retryAttempts": "1"
            },
            "type": "retryFormulaExecution"
        },
        {
            "name": "create-unique-eventid",
            "onFailure": [],
            "onSuccess": [
                "is-sfdc-event"
            ],
            "properties": {
                "body": "done({\n  eventId: trigger.eventId + \"_\" + (Math.floor(Math.random() * (9999 - 1000)) + 1000)\n});"
            },
            "type": "script"
        },
        {
            "name": "send-box-metadata-event",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [],
            "properties": {
                "body": "${steps.transform-box-metadata-event.response}",
                "headers": "${config.event.notification.authtoken}",
                "method": "POST",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000",
                "url": "${config.event.notification.url}"
            },
            "type": "httpRequest"
        },
        {
            "name": "send-document-event",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [],
            "properties": {
                "body": "${steps.transform-document-event.response}",
                "headers": "${config.event.notification.authtoken}",
                "method": "POST",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000",
                "url": "${config.event.notification.url}"
            },
            "type": "httpRequest"
        },
        {
            "name": "send-error-payload",
            "onFailure": [
                "retry-api-errors"
            ],
            "onSuccess": [
                "retry-api-errors"
            ],
            "properties": {
                "body": "${steps.build-error-payload.response}",
                "method": "POST",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000",
                "url": "https://ncpprd01cesfncwus01.azurewebsites.net/api/FormulaErrors?code=************"
            },
            "type": "httpRequest"
        },
        {
            "name": "set-retry-step-names",
            "onFailure": [],
            "onSuccess": [
                "is-retriable-status-code"
            ],
            "properties": {
                "body": "const apiStepNames = [\"get-object\", \"get-document-object\", \"send-event\", \"send-document-event\", \"get-element-instance-for-org-id\", \"get-box-custom-fields\", \"send-box-metadata-event\"]; \r\n\r\ndone({ steps: apiStepNames });\r\n"
            },
            "type": "script"
        },
        {
            "name": "transform-box-metadata-event",
            "onFailure": [],
            "onSuccess": [
                "send-box-metadata-event"
            ],
            "properties": {
                "body": "var result = {};\r\nvar rawObject = trigger.body.message.raw;\r\nvar propertiesObject = trigger.properties;\r\nvar objectType = trigger.event.objectType;\r\nvar templateType = {};\r\n\r\nif (objectType === undefined || objectType === null || objectType === \"\") {\r\n  objectType = \"unknown\";\r\n}\r\n\r\nif ( rawObject.type === 'webhook_event') {\r\n    templateType = rawObject.additional_info.metadata.type;\r\n}\r\n\r\nif (steps['get-box-custom-fields']) { \r\n  try {\r\n    result.eventType = `${trigger.event.elementKey}:${objectType.toLowerCase()}metadata:${trigger.event.eventType.toLowerCase()}`;\r\n    \r\n    if (steps[\"get-document-object\"] !== undefined && steps[\"get-document-object\"] !== null) {\r\n      const metadata = steps[\"get-document-object\"].response.body;\r\n      Object.keys(metadata).map(k => {\r\n        // file properties will have prefix of 'metadata_{propertyName}' to avoid conflicts with template property names\r\n        result.properties = Object.assign({}, result.properties, { [`metadata_${k}`]: metadata[k] });\r\n      });\r\n    }\r\n    \r\n    const boxCustomFieldDetails = steps['get-box-custom-fields'].response.body;\r\n    \r\n    boxCustomFieldDetails.filter( x => templateType.startsWith(x.$type))\r\n                         .map( o => {\r\n                             // filter out the properties starting with $, this would give us fields of the template with format templateKey_FieldName\r\n                             Object.keys(o)\r\n                                   .filter( key => key.startsWith('$') === false)\r\n                                   .map((key) => {\r\n                                      result.properties = Object.assign({}, result.properties, { [key]: o[key]});\r\n                                    });\r\n                              \r\n                              result.properties = Object.assign({},\r\n                                                      result.properties, \r\n                                                      {\r\n                                                        templateKey: o.$template,\r\n                                                        scope: 'enterprise',\r\n                                                      });\r\n                         });\r\n    \r\n    \r\n    result.eventId = steps[\"create-unique-eventid\"].eventId;\r\n    result.connectionId = trigger.instanceId;\r\n    result.objectId = trigger.event.objectId;\r\n    result.timestamp = trigger.event.date;\r\n  } catch (e) { \r\n    console.log(e);\r\n    console.log(trigger);\r\n  } \r\n} \r\n\r\n\r\ndone({ response: result });\r\n"
            },
            "type": "script"
        },
        {
            "name": "transform-document-event",
            "onFailure": [],
            "onSuccess": [
                "send-document-event"
            ],
            "properties": {
                "body": "var eventObject = trigger.event;\rvar objectType = trigger.event.objectType;\rvar objectId = trigger.event.objectId;\r\rif (objectType === undefined || objectType === null || objectType === \"\") {\r  objectType = \"unknown\";\r}\r\rvar rawObject = {};\r\rif (steps[\"get-document-object\"] !== undefined && steps[\"get-document-object\"] !== null) {\r  rawObject = steps[\"get-document-object\"].response.body;\r} else {\r  rawObject.path = trigger.event.objectId;\r  rawObject.properties = {};\r}\r\rvar transformedEvent = {};\r\rtransformedEvent.eventType = trigger.event.elementKey + \":\" + objectType.toLowerCase() + \":\" + trigger.event.eventType.toLowerCase();\rtransformedEvent.eventId = steps[\"create-unique-eventid\"].eventId;\rtransformedEvent.connectionId = trigger.instanceId;\rtransformedEvent.objectId = objectId;\rtransformedEvent.connectionInfo = {};\rif (steps['get-org-id'] && steps['get-org-id'].orgId) {\r  transformedEvent.connectionInfo.orgId = steps['get-org-id'].orgId;\r}\rtransformedEvent.timestamp = trigger.event.date;\rtransformedEvent.properties = {};\rtransformedEvent.properties = rawObject;\r\r// Return Member Id in payload for DB4B\rif (objectType !== \"unknown\") {\r  if(trigger.event.otherId !== undefined && trigger.event.otherId !== null) {\r\t  // Expected value is dbtid:AAC2CNprmSBHFD79qHd_QUV33-FrRsnK8T0,dbmid:AABAH2R7jayqGSvlvPjAoJAhG33xssT5lZc\r    var ids = trigger.event.otherId.split(\",\");\r    if(ids.length === 2 && ids[1].indexOf(\"dbmid:\") === 0) {\r\t\t  transformedEvent.properties.memberId = ids[1];\r    }\r  }\r}\r\rdone({ response: transformedEvent });"
            },
            "type": "script"
        },
        {
            "name": "transform-event",
            "onFailure": [],
            "onSuccess": [
                "send-event"
            ],
            "properties": {
                "body": "var eventObject = trigger.event;\nvar objectType = trigger.event.objectType;\nvar objectId = trigger.event.objectId;\n\nif (objectType === undefined || objectType === null || objectType === \"\") {\n  objectType = \"unknown\";\n}\n\nvar rawObject = steps[\"build-object\"].body;\nvar transformedEvent = {};\n\ntransformedEvent.eventType = trigger.event.elementKey + \":\" + objectType.toLowerCase() + \":\" + trigger.event.eventType.toLowerCase();\ntransformedEvent.eventId = steps[\"create-unique-eventid\"].eventId;\ntransformedEvent.connectionId = trigger.instanceId;\ntransformedEvent.objectId = objectId;\ntransformedEvent.connectionInfo = {};\nif (steps['get-org-id'] && steps['get-org-id'].orgId) {\n  transformedEvent.connectionInfo.orgId = steps['get-org-id'].orgId;\n}\ntransformedEvent.timestamp = trigger.event.date;\ntransformedEvent.properties = rawObject;\n\ndone({ response: transformedEvent });"
            },
            "type": "script"
        },
        {
            "name": "send-event",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [],
            "properties": {
                "body": "${steps.transform-event.response}",
                "headers": "${steps.build-object.headers}",
                "method": "POST",
                "retry": "true",
                "retryAttempts": "1",
                "retryDelay": "3000",
                "url": "${config.event.notification.url}"
            },
            "type": "httpRequest"
        },
        {
            "name": "is-documents-hub",
            "onFailure": [
                "build-document-get-object-input"
            ],
            "onSuccess": [
                "build-object"
            ],
            "properties": {
                "body": "if (trigger.event.hubKey === 'documents') {\r  done(false);\r} else {\r  done(true);\r}"
            },
            "type": "filter"
        },
        {
            "name": "build-object",
            "onFailure": [
                "set-retry-step-names"
            ],
            "onSuccess": [
                "transform-event"
            ],
            "properties": {
                "body": "done(\n  {\n    body: {\n      \"attributes\": {\n        \"type\": \"Contact\",\n        \"url\": \"/services/data/v36.0/sobjects/Contact/003F000001OWCvuIAH\"\n      },\n      \"Bad_Work_Address__c\": false,\n      \"LastModifiedDate\": \"2016-03-30T18:54:28.000+0000\",\n      \"Always_Anonymous__c\": false,\n      \"HasOptedOutOfFax\": false,\n      \"npo02__OppAmount2YearsAgo__c\": 0,\n      \"Primary_Street__c\": \"415 Manor Drive\",\n      \"npe01__Lifetime_Giving_History_Amount__c\": 10,\n      \"npo02__LastMembershipAmount__c\": 0,\n      \"npo02__OppsClosed2YearsAgo__c\": 0,\n      \"OtherCity\": \"East Syracuse\",\n      \"Donated_More_This_Year__c\": false,\n      \"npo02__OppsClosedThisYear__c\": 0,\n      \"npo02__FirstCloseDate__c\": \"2008-06-17\",\n      \"Bad_Home_Address__c\": false,\n      \"npo02__Formula_HouseholdMailingAddress__c\": \"_BR_ENCODED_  \",\n      \"npo02__Soft_Credit_Total__c\": 0,\n      \"IsDeleted\": false,\n      \"FY_Major_Donor__c\": false,\n      \"Household_Informal_Greeting__c\": \"Kiehl\",\n      \"Primary_Country__c\": \"United States\",\n      \"npo02__TotalOppAmount__c\": 10,\n      \"OtherStreet\": \"415 Manor Drive\",\n      \"Do_Not_Solicit__c\": false,\n      \"Contact_18_Digit_ID__c\": \"003F000001OWCvuIAH\",\n      \"Brice_TY__c\": false,\n      \"npo02__NumberOfMembershipOpps__c\": 0,\n      \"Full_Name__c\": \"Kiehl Christie\",\n      \"npo02__OppAmountLastYear__c\": 0,\n      \"Id\": \"003F000001OWCvuIAH\",\n      \"npo02__Soft_Credit_Last_Year__c\": 0,\n      \"npo02__AverageAmount__c\": 10,\n      \"npo02__OppAmountLastYearHH__c\": 0,\n      \"npsp__Exclude_from_Household_Informal_Greeting__c\": false,\n      \"AccountName\": \"Kiehl Christie\",\n      \"npo02__SystemHouseholdProcessor__c\": \"No Contacts\",\n      \"DoNotCall\": false,\n      \"npsp__Exclude_from_Household_Name__c\": false,\n      \"npe01__Last_Donation_Date__c\": \"2008-06-17\",\n      \"Deceased__c\": false,\n      \"Do_Not_Mail__c\": false,\n      \"npsp__is_Address_Override__c\": false,\n      \"OwnerId\": \"005F0000003MOaFIAW\",\n      \"Major_Donor_Prospect__c\": false,\n      \"Household_Formal_Greeting__c\": \"Kiehl Christie\",\n      \"RecordTypeId\": \"012F0000000ndSMIAY\",\n      \"OtherCountry\": \"United States\",\n      \"Send_Personal_TY_From_Chip__c\": false,\n      \"Sailthru__ST_synchable__c\": true,\n      \"Client_Contacted__c\": false,\n      \"Newsletter_Opt_Out__c\": false,\n      \"npsp__Deceased__c\": false,\n      \"npsp__HHId__c\": \"a00F000000ApFXVIA3\",\n      \"npo02__Best_Gift_Year__c\": \"2008\",\n      \"FirstName\": \"Kiehl\",\n      \"npo02__Naming_Exclusions__c\": \"0\",\n      \"OtherPostalCode\": \"13057\",\n      \"Jeff_TY__c\": false,\n      \"npo02__LargestAmount__c\": 10,\n      \"npo02__NumberOfClosedOpps__c\": 1,\n      \"npo02__Total_Household_Gifts__c\": 10,\n      \"npo02__Best_Gift_Year_Total__c\": 10,\n      \"SystemModstamp\": \"2016-03-30T18:54:28.000+0000\",\n      \"npo02__OppAmountThisYearHH__c\": 0,\n      \"Do_Not_Trade__c\": false,\n      \"npe01__HomeEmail__c\": \"kiehl.christie@hotmail.com\",\n      \"npe01__Type_of_Account__c\": \"Individual\",\n      \"npsp__Primary_Contact__c\": true,\n      \"AccountId\": \"001F0000014sKugIAE\",\n      \"Email\": \"kiehl.christie@hotmail.com\",\n      \"npo02__LastOppAmount__c\": 10,\n      \"npe01__Organization_Type__c\": \"One-to-One Individual\",\n      \"New_Stripe_Contact__c\": false,\n      \"VIP__c\": false,\n      \"CreatedById\": \"005F0000003MOZgIAO\",\n      \"npo02__OppsClosedLastYear__c\": 0,\n      \"Donated_more_Last_Year_than_2_YA__c\": false,\n      \"Board_Prospect__c\": false,\n      \"npe01__Private__c\": false,\n      \"npo02__Household__c\": \"a00F000000ApFXVIA3\",\n      \"npsp__Do_Not_Contact__c\": false,\n      \"npsp__Soft_Credit_Last_N_Days__c\": 0,\n      \"IsEmailBounced\": false,\n      \"npo02__LastCloseDate__c\": \"2008-06-17\",\n      \"HasOptedOutOfEmail\": false,\n      \"npo02__OppAmountThisYear__c\": 0,\n      \"npsp__Exclude_from_Household_Formal_Greeting__c\": false,\n      \"npo02__Soft_Credit_Two_Years_Ago__c\": 0,\n      \"Primary_Postal_Code__c\": \"13057\",\n      \"npo02__OppsClosedLastNDays__c\": 0,\n      \"CreatedDate\": \"2008-06-26T19:21:48.000+0000\",\n      \"Primary_City__c\": \"East Syracuse\",\n      \"LastName\": \"Christie\",\n      \"npo02__OppAmountLastNDays__c\": 0,\n      \"Number_of_Monthly_Gifts__c\": 0,\n      \"Client_Responded__c\": false,\n      \"OtherState\": \"NY\",\n      \"Unduplicated_Contact_Count__c\": 1,\n      \"npe01__SystemIsIndividual__c\": false,\n      \"Primary_State_Province__c\": \"NY\",\n      \"Legacy_Contact_Id__c\": \"0035000000Wc7ZiAAJ\",\n      \"Board_Member__c\": false,\n      \"Only_Solicit_at_Year_End__c\": false,\n      \"Primary_Address__c\": \"Work\",\n      \"External_Major_Donor__c\": false,\n      \"Cancel_Auto_TY_Emails__c\": false,\n      \"npo02__TotalMembershipOppAmount__c\": 0,\n      \"Legacy_Owner_Id__c\": \"00550000001I4ySAAS\",\n      \"npo02__Soft_Credit_This_Year__c\": 0,\n      \"Former_Board_Member__c\": false,\n      \"npo02__SmallestAmount__c\": 10,\n      \"rh2__Formula_Test__c\": 0,\n      \"npe01__Preferred_Email__c\": \"Personal\",\n      \"LastModifiedById\": \"005F0000003MOZgIAO\",\n      \"npo02__LastCloseDateHH__c\": \"2008-06-17\"\n    },\n    headers: {\n      \"Content-Type\": \"application/json\"\n    }\n  }\n);\n"
            },
            "type": "script"
        }
    ],
    "triggers": [
        {
            "async": true,
            "name": "trigger",
            "onFailure": [],
            "onSuccess": [
                "create-unique-eventid"
            ],
            "properties": {
                "elementInstanceId": "${config.element.instance}"
            },
            "type": "event"
        }
    ]
}

